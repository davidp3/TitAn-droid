This is TitAn-droid.

TitAn-droid is a fork of Titan that is configured to build and run on Android with minimal changes to the original Titan.  This fork is not very far along but is being used in a product in-development.  Graph databases like TitAn-droid make sense for almost all applications but they are especially appropriate for (surprise) data that is most naturally defined as a graph.  Even those with no sense of imagination can picture use-cases (social networks, wide-area networks, networks of all kinds, etc).

This project is highly experimental.  An alternative Android port of Titan that may be more practical can be found "here":https://github.com/wuman/titan-android .

TitAn-droid is an attempt to build and use Titan with as few changes to the original project as possible.  This is something of a mad-scientist type goal and so some 'forbidden' tools are used.  The overall approach of the project is this:
# Build the source of Titan projects for titan-core and titan-berkeleyje.  The source is largely untouched.
# Merge Titan and its dependencies into one jar.
# Run JarJar Links on the resulting jar to retarget some of the APIs that aren't available on Android.  For example, one of the transitive dependencies of Titan is StAX, which exists in J2SE's rt.jar/classes.jar but not on Android.  Some clues to JarJar can be found "here":https://code.google.com/p/dalvik/wiki/JavaxPackages but this tool is not thoroughly documented so we are flying pretty crazy high at this point.
# Carefully run Proguard on the result, which is rather large.  This is because the result of the entire compile is "too large for the Android SDK to handle":http://stackoverflow.com/questions/15209831/unable-to-execute-dex-method-id-not-in-0-0xffff-65536 .  Proguard should still be run by your own application-build (for releases, anyway).  This step is really about avoiding the aforementioned compiler limitation.
# Include the subproject that does this, titan-core-dummy, in the final application.  Don't forget not to try to do database operations on your main UI thread!


!https://github.com/thinkaurelius/titan/raw/master/doc/images/titan-logo.png!

Titan is a highly scalable "graph database":http://en.wikipedia.org/wiki/Graph_database optimized for storing and querying large graphs with billions of vertices and edges distributed across a multi-machine cluster. Titan is a transactional database that can support "thousands of concurrent users":http://thinkaurelius.com/2012/08/06/titan-provides-real-time-big-graph-data/.

h2. Features

* Elastic and linear scalability for a growing data and user base.
* Data distribution and replication for performance and fault tolerance.
* Multi-datacenter high availability and hot backups.
* Support for "ACID":http://en.wikipedia.org/wiki/ACID and "eventual consistency":http://en.wikipedia.org/wiki/Eventual_consistency.
* Support for various "storage backends":https://github.com/thinkaurelius/titan/wiki/Storage-Backend-Overview:
** "Apache Cassandra":http://cassandra.apache.org/
** "Apache HBase":http://hbase.apache.org/
** "Oracle BerkeleyDB":http://www.oracle.com/technetwork/database/berkeleydb/overview/index-093405.html
* Support for various "indexing backends":https://github.com/thinkaurelius/titan/wiki/Indexing-Backend-Overview:
** "ElasticSearch":http://www.elasticsearch.org/
** "Apache Lucene":http://lucene.apache.org/
* Native integration with the "TinkerPop":http://www.tinkerpop.com graph stack:
** "Gremlin":http://gremlin.tinkerpop.com graph query language
** "Frames":http://frames.tinkerpop.com object-to-graph mapper
** "Rexster":http://rexster.tinkerpop.com graph server
** "Blueprints":http://blueprints.tinkerpop.com standard graph API
* Open source with the liberal "Apache 2 license":http://www.apache.org/licenses/LICENSE-2.0.html.

h2. Getting Started

Read the comprehensive "Titan documentation":https://github.com/thinkaurelius/titan/wiki and join the "mailing list":https://groups.google.com/forum/#!forum/aureliusgraphs.
